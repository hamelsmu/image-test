{
  
    
        "post0": {
            "title": "Learning for Gold",
            "content": "Introduction . Let&#39;s say you&#39;ve been hired by a gold extraction company. . They&#39;re interested in developing a model that will predict the recovery of gold in their gold extraction process. We will explore the dataset, determine an appropriate error metric, and find a model that minimizes this error. . . # collapse from pathlib import Path import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns from joblib import dump, load sns.set() from sklearn.metrics import make_scorer from sklearn.pipeline import make_pipeline from sklearn.preprocessing import StandardScaler from sklearn.impute import SimpleImputer from sklearn.ensemble import RandomForestRegressor from sklearn.multioutput import MultiOutputRegressor, RegressorChain from sklearn.linear_model import SGDRegressor from sklearn.metrics import mean_absolute_error from sklearn.dummy import DummyRegressor from sklearn.model_selection import RandomizedSearchCV, GridSearchCV, cross_validate STATE = 10 . . model_path = Path(&quot;../models&quot;) file_paths = [ Path(&quot;../datasets&quot;) / (&quot;gold_recovery_&quot; + name + &quot;.csv&quot;) for name in [&quot;train&quot;, &quot;test&quot;, &quot;full&quot;] ] train, X_test, full = (pd.read_csv(f, index_col=&#39;date&#39;) for f in file_paths) . Exploratory Data Analysis . The following transform allows us to separate categories into individual state, statetype and mineral to better understand how share value changes in each step. . Filtration process . train.columns[train.columns.str.endswith(&quot;au&quot;)] . Index([&#39;final.output.concentrate_au&#39;, &#39;final.output.tail_au&#39;, &#39;primary_cleaner.output.concentrate_au&#39;, &#39;primary_cleaner.output.tail_au&#39;, &#39;rougher.input.feed_au&#39;, &#39;rougher.output.concentrate_au&#39;, &#39;rougher.output.tail_au&#39;, &#39;secondary_cleaner.output.tail_au&#39;], dtype=&#39;object&#39;) . Target Leakage . We need to make sure we don&#39;t include features that will not be available at prediction time. . We can determine which features these are by comparing our training set with the given test set that omits certain features. . # Examining the difference in columns between the training and testing set. features = X_test.columns train.loc[:, sorted(set(train.columns).difference(set(features)))].info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 16860 entries, 2016-01-15 00:00:00 to 2018-08-18 10:59:59 Data columns (total 34 columns): # Column Non-Null Count Dtype -- -- 0 final.output.concentrate_ag 16788 non-null float64 1 final.output.concentrate_au 16789 non-null float64 2 final.output.concentrate_pb 16788 non-null float64 3 final.output.concentrate_sol 16490 non-null float64 4 final.output.recovery 15339 non-null float64 5 final.output.tail_ag 16794 non-null float64 6 final.output.tail_au 16794 non-null float64 7 final.output.tail_pb 16677 non-null float64 8 final.output.tail_sol 16715 non-null float64 9 primary_cleaner.output.concentrate_ag 16778 non-null float64 10 primary_cleaner.output.concentrate_au 16778 non-null float64 11 primary_cleaner.output.concentrate_pb 16502 non-null float64 12 primary_cleaner.output.concentrate_sol 16224 non-null float64 13 primary_cleaner.output.tail_ag 16777 non-null float64 14 primary_cleaner.output.tail_au 16777 non-null float64 15 primary_cleaner.output.tail_pb 16761 non-null float64 16 primary_cleaner.output.tail_sol 16579 non-null float64 17 rougher.calculation.au_pb_ratio 15618 non-null float64 18 rougher.calculation.floatbank10_sulfate_to_au_feed 16833 non-null float64 19 rougher.calculation.floatbank11_sulfate_to_au_feed 16833 non-null float64 20 rougher.calculation.sulfate_to_au_concentrate 16833 non-null float64 21 rougher.output.concentrate_ag 16778 non-null float64 22 rougher.output.concentrate_au 16778 non-null float64 23 rougher.output.concentrate_pb 16778 non-null float64 24 rougher.output.concentrate_sol 16698 non-null float64 25 rougher.output.recovery 14287 non-null float64 26 rougher.output.tail_ag 14610 non-null float64 27 rougher.output.tail_au 14611 non-null float64 28 rougher.output.tail_pb 16778 non-null float64 29 rougher.output.tail_sol 14611 non-null float64 30 secondary_cleaner.output.tail_ag 16776 non-null float64 31 secondary_cleaner.output.tail_au 16778 non-null float64 32 secondary_cleaner.output.tail_pb 16764 non-null float64 33 secondary_cleaner.output.tail_sol 14874 non-null float64 dtypes: float64(34) memory usage: 4.5+ MB . . test = full.loc[X_test.index] print(f&quot;Training set shape: {train.shape}, Testing set shape: {test.shape}&quot;) . Training set shape: (16860, 86), Testing set shape: (5856, 86) . Target Variable Creation . In order to predict recovery, recovery must be generated as a target variable from rougher input, output and tails. . . Where: . C - share of gold in concentrate right after flotation - rougher.output.concentrate_au | F - share of gold in the feed before flotation - rougher.input.feed_au | T - share of gold in rougher tails right after flotation - rougher.output.tail_au | . We&#39;re going to calculate gold recovery from the first and second process using the following function. . I&#39;ve added some filtration steps if any value is zero or negative. . def calc_recovery(C, F, T): rec = ((C * (F - T)) / (F * (C - T))) * 100 return rec . datasets = [train, test] types = { &quot;recovery_first&quot;: [ &quot;rougher.output.concentrate_au&quot;, &quot;rougher.input.feed_au&quot;, &quot;rougher.output.tail_au&quot;, ] } for d in datasets: for name, cols in types.items(): d[name] = calc_recovery(*[d[t] for t in cols]) . Missing and Unusual Values in Targets . Strategy: . - Drop NA values if contained in either target variables. - Drop values that are between 0 and 100 in the training and testing set. - EDA shows that values in the range of 40 - 98 % recovery helps reduce outlying values. - These will only be performed on the training set. . def clean_target(df, targets, lower=0, upper=100): clean_na = ~df[targets].isna().any(axis=1) clean_outrange = df[targets].apply(lambda x: x.between(lower, upper, inclusive=False)).all(axis=1) return df.loc[clean_na &amp; clean_outrange] . targets = [&#39;recovery_first&#39;, &#39;final.output.recovery&#39;] train, test = [clean_target(_, targets) for _ in [train, test]] . X_train, y_train = ( train[features], train[[&quot;recovery_first&quot;, &quot;final.output.recovery&quot;]], ) X_test, y_test = ( test[features], test[[&quot;recovery_first&quot;, &quot;final.output.recovery&quot;]], ) . There&#39;s a long tail distribtion, though I&#39;m uncertain if these values are a true phenomenon. . # collapse with sns.plotting_context(&#39;notebook&#39;, font_scale=1.5): fig, axes = plt.subplots(nrows=2, sharex=True, figsize=[10,10]) sns.boxplot(train[&quot;recovery_first&quot;], ax=axes[0]) sns.boxplot(train[&quot;final.output.recovery&quot;], ax=axes[1]) fig.suptitle(&quot;Comparing Recovery Between First and Final Filtration Steps&quot;) . . #collapse with sns.plotting_context(&quot;notebook&quot;, font_scale=1.5): fig, ax = plt.subplots(figsize=[10,10]) sns.scatterplot(data=train, x=&#39;recovery_first&#39;, y=&#39;final.output.recovery&#39;, alpha=0.25, ax=ax) ax.set(title=&#39;The relationship between first and final steps of filteration recovery percentage&#39;) . . Here we can observe how the process creating a higher share of gold as it is processed, while the other minerals have a higher share in the tails. . There also seems to be some long tails with the output.concentrate of au. . The final stage is much more effective at increasing the share of gold in our solution. . Because the second process is so much more effective, We can give more weight to the model that can give us a stronger prediction of a high yield at the final stage. . # collapse dfs = [] for group, col_names in types.items(): vis_df = pd.melt( train[col_names], var_name=&quot;Extract Stage&quot;, value_name=&quot;Gold Concentration&quot; ) vis_df[&quot;group&quot;] = group dfs.append(vis_df) vis_df = pd.concat(dfs) vis_df[&quot;Extract Stage&quot;] = ( vis_df[&quot;Extract Stage&quot;] .str.replace(&quot;final.output.concentrate_au&quot;, &quot;output&quot;) .str.replace(&quot;rougher.output.tail_au&quot;, &quot;tails&quot;) .str.replace(&quot;final.output.tail_au&quot;, &quot;tails&quot;) .str.replace(&quot;rougher.input.feed_au&quot;, &quot;input&quot;) ) vis_df.loc[ (vis_df[&quot;group&quot;] == &quot;final.output.recovery&quot;) &amp; (vis_df[&quot;Extract Stage&quot;] == &quot;rougher.output.concentrate_au&quot;), &quot;Extract Stage&quot;, ] = ( &quot;input&quot; ) vis_df[&quot;Extract Stage&quot;] = vis_df[&quot;Extract Stage&quot;].str.replace( &quot;rougher.output.concentrate_au&quot;, &quot;output&quot; ) order = [&quot;input&quot;, &quot;output&quot;, &quot;tails&quot;] with sns.plotting_context(&quot;notebook&quot;, font_scale=1.5): g = sns.catplot( x=&quot;group&quot;, y=&quot;Gold Concentration&quot;, data=vis_df, col=&quot;Extract Stage&quot;, kind=&quot;box&quot;, col_order=order, ) . . We can now compare metal shares throughout the purification process. . #collapse cats = [ &quot;rougher.input.feed&quot;, &quot;rougher.output.concentrate&quot;, &quot;rougher.output.tail&quot;, &quot;final.output.concentrate&quot;, &quot;final.output.tail&quot;, ] ele_df = train.loc[:, train.columns.str.match(&quot;|&quot;.join(cats))].melt( var_name=&quot;name&quot;, value_name=&quot;share&quot; ) pattern = r&quot;(?P&lt;stage&gt; w+) .(?P&lt;statetype&gt; w+ . w+)_(?P&lt;mineral&gt; w w)&quot; ele_df = ele_df.join(ele_df[&quot;name&quot;].str.extract(pattern)).drop(&quot;name&quot;, axis=1) with sns.plotting_context(&quot;notebook&quot;, font_scale=1.5): g = sns.catplot( kind=&quot;box&quot;, hue=&quot;stage&quot;, y=&quot;share&quot;, data=ele_df, col_order=[&quot;au&quot;, &quot;ag&quot;, &quot;pb&quot;], x=&quot;statetype&quot;, col=&quot;mineral&quot;, hue_order=[&quot;rougher&quot;, &quot;final&quot;], order=[&quot;input.feed&quot;, &quot;output.concentrate&quot;, &quot;output.tail&quot;], ) g.set_xticklabels(rotation=30) . . # collapse ele_df.loc[ele_df[&quot;mineral&quot;] == &quot;au&quot;].groupby( [&quot;statetype&quot;, &quot;stage&quot;, &quot;mineral&quot;] ).describe() . . share . count mean std min 25% 50% 75% max . statetype stage mineral . input.feed rougher au 16777.0 | 7.170717 | 3.002113 | 0.000000 | 6.203083 | 7.443530 | 8.965193 | 14.093363 | . output.concentrate final au 16789.0 | 39.467217 | 13.917227 | 0.000000 | 42.055722 | 44.498874 | 45.976222 | 53.611374 | . rougher au 16778.0 | 17.401541 | 6.921875 | 0.000000 | 17.443663 | 19.644663 | 21.224486 | 28.522811 | . output.tail final au 16794.0 | 2.687512 | 1.272757 | 0.000000 | 2.172953 | 2.781132 | 3.416936 | 9.789625 | . rougher au 14611.0 | 1.763930 | 0.731518 | 0.020676 | 1.311610 | 1.747907 | 2.190839 | 9.688980 | . #collapse scatter_dat = train.loc[:, train.columns.str.match(&quot;|&quot;.join(cats))] with sns.plotting_context(&quot;notebook&quot;, font_scale=1.5): fig, axes = plt.subplots(nrows=2, figsize=[10,10]) sns.scatterplot(data=scatter_dat, x=&quot;rougher.input.feed_au&quot;, y=&quot;rougher.output.concentrate_au&quot;, ax=axes[0], alpha=0.25) sns.scatterplot(data=scatter_dat, x=&quot;rougher.output.concentrate_au&quot;, y=&quot;final.output.concentrate_au&quot;, ax=axes[1], alpha=0.25) . . In order to determine if the training set is very representative, we can compare our features between training and testing sets. Here&#39;s and example of how we can do that. . #collapse comp_feed = pd.concat( [train[&quot;rougher.input.feed_size&quot;], test[&quot;rougher.input.feed_size&quot;]], axis=1 ) comp_feed.columns = [&quot;train&quot;, &quot;test&quot;] comp_feed = pd.melt(comp_feed, var_name=&quot;rougher input feed size&quot;, value_name=&quot;share&quot;) sns.boxplot(data=comp_feed, x=&quot;rougher input feed size&quot;, y=&quot;share&quot;) plt.show() . . Machine Learning . . Preprocessing . Based on exploring the dataset, I&#39;m going to trim target training values to be in between 40 and 98 % recovery. . Ideally this will yield a higher test score. . targets = [&#39;recovery_first&#39;, &#39;final.output.recovery&#39;] train_c = clean_target(train, targets, lower=40, upper=98) test_c = clean_target(test, targets) print(f&quot;After filtering, we are retaining {(train_c.shape[0]/train.shape[0]):.2%} of the training data&quot;) print(f&quot;After filtering, we are retaining {(test_c.shape[0]/test.shape[0]):.2%} of the testing data&quot;) train = train_c test = test_c train[targets].describe() . After filtering, we are retaining 79.64% of the training data After filtering, we are retaining 87.74% of the testing data . recovery_first final.output.recovery . count 13428.000000 | 13428.000000 | . mean 84.676688 | 67.117387 | . std 7.369024 | 7.762972 | . min 40.346710 | 40.092124 | . 25% 80.473341 | 62.948731 | . 50% 85.554797 | 67.507883 | . 75% 90.257993 | 72.299998 | . max 97.983095 | 97.987428 | . Scoring . . Because there are multiple levels of filtration, It&#39;s important to factor in both the rougher and final recovery for predictions. . def calc_smape(y: np.array, y_pred: np.array) -&gt; float: &quot;&quot;&quot;Symmetric Mean Absolute Percentage Error&quot;&quot;&quot; smape_s = ( np.mean( ( np.abs(y_pred - y) / ((np.abs(y) + np.abs(y_pred)) / 2) ) ) * 100 ) return smape_s def smape_score(y: np.array, y_pred: np.array) -&gt; float: &quot;&quot;&quot;Combine the &quot;&quot;&quot; smape_r = calc_smape(y[:, 0], y_pred[:, 0]) smape_f = calc_smape(y[:, 1], y_pred[:, 1]) final_score = smape_r * 0.25 + smape_f * 0.75 return final_score . Here&#39;s what our target and training data look like. . y_train.head() . recovery_first final.output.recovery . date . 2016-01-15 00:00:00 87.107763 | 70.541216 | . 2016-01-15 01:00:00 86.843261 | 69.266198 | . 2016-01-15 02:00:00 86.842308 | 68.116445 | . 2016-01-15 03:00:00 87.226430 | 68.347543 | . 2016-01-15 04:00:00 86.688794 | 66.927016 | . X_train.head() . primary_cleaner.input.sulfate primary_cleaner.input.depressant primary_cleaner.input.feed_size primary_cleaner.input.xanthate primary_cleaner.state.floatbank8_a_air primary_cleaner.state.floatbank8_a_level primary_cleaner.state.floatbank8_b_air primary_cleaner.state.floatbank8_b_level primary_cleaner.state.floatbank8_c_air primary_cleaner.state.floatbank8_c_level ... secondary_cleaner.state.floatbank4_a_air secondary_cleaner.state.floatbank4_a_level secondary_cleaner.state.floatbank4_b_air secondary_cleaner.state.floatbank4_b_level secondary_cleaner.state.floatbank5_a_air secondary_cleaner.state.floatbank5_a_level secondary_cleaner.state.floatbank5_b_air secondary_cleaner.state.floatbank5_b_level secondary_cleaner.state.floatbank6_a_air secondary_cleaner.state.floatbank6_a_level . date . 2016-01-15 00:00:00 127.092003 | 10.128295 | 7.25 | 0.988759 | 1549.775757 | -498.912140 | 1551.434204 | -516.403442 | 1549.873901 | -498.666595 | ... | 14.016835 | -502.488007 | 12.099931 | -504.715942 | 9.925633 | -498.310211 | 8.079666 | -500.470978 | 14.151341 | -605.841980 | . 2016-01-15 01:00:00 125.629232 | 10.296251 | 7.25 | 1.002663 | 1576.166671 | -500.904965 | 1575.950626 | -499.865889 | 1575.994189 | -499.315107 | ... | 13.992281 | -505.503262 | 11.950531 | -501.331529 | 10.039245 | -500.169983 | 7.984757 | -500.582168 | 13.998353 | -599.787184 | . 2016-01-15 02:00:00 123.819808 | 11.316280 | 7.25 | 0.991265 | 1601.556163 | -499.997791 | 1600.386685 | -500.607762 | 1602.003542 | -500.870069 | ... | 14.015015 | -502.520901 | 11.912783 | -501.133383 | 10.070913 | -500.129135 | 8.013877 | -500.517572 | 14.028663 | -601.427363 | . 2016-01-15 03:00:00 122.270188 | 11.322140 | 7.25 | 0.996739 | 1599.968720 | -500.951778 | 1600.659236 | -499.677094 | 1600.304144 | -500.727997 | ... | 14.036510 | -500.857308 | 11.999550 | -501.193686 | 9.970366 | -499.201640 | 7.977324 | -500.255908 | 14.005551 | -599.996129 | . 2016-01-15 04:00:00 117.988169 | 11.913613 | 7.25 | 1.009869 | 1601.339707 | -498.975456 | 1601.437854 | -500.323246 | 1599.581894 | -500.888152 | ... | 14.027298 | -499.838632 | 11.953070 | -501.053894 | 9.925709 | -501.686727 | 7.894242 | -500.356035 | 13.996647 | -601.496691 | . 5 rows × 52 columns . Now that we have a preprocessing plan, lets experiment with two algorithms. . - A stochastic gradient decent algorithm with a grid search of reasonable hyperparameters. - A random forest with 200 estimators. . Here&#39;s what the grid search looks like. Luckly, SGD can be very quick and we can rapidly search through our parameters. . #collapse prep = make_pipeline(SimpleImputer(), StandardScaler()) lin = make_pipeline(prep, MultiOutputRegressor(SGDRegressor(random_state=STATE))) lhparams = { &quot;multioutputregressor__estimator__alpha&quot;: 10.0 ** -np.arange(1, 4), &quot;multioutputregressor__estimator__penalty&quot;: [&quot;l2&quot;, &quot;l1&quot;, &quot;elasticnet&quot;], &quot;multioutputregressor__estimator__loss&quot;: [ &quot;huber&quot;, &quot;squared_loss&quot;, &quot;epsilon_insensitive&quot;, ], &quot;pipeline__simpleimputer__strategy&quot;: [&quot;mean&quot;, &quot;median&quot;], } try: lin_search = load(model_path / &quot;lin_search.joblib&quot;) except: lin_search = GridSearchCV( lin, lhparams, scoring=make_scorer(smape_score, greater_is_better=False), cv=5, n_jobs=-1, ) lin_search.fit(X_train, y_train.values) dump(lin_search, model_path / &quot;lin_search.joblib&quot;) print(f&quot;Our best linear model produced a symmetric mean absolute error of {-lin_search.best_score_:.2f} percent on the mean validation score&quot;) . . Our best linear model produced a symmetric mean absolute error of 7.63 percent on the mean validation score . We can see the params from our search as well: . #collapse lin_search.best_params_ . . {&#39;multioutputregressor__estimator__alpha&#39;: 0.01, &#39;multioutputregressor__estimator__loss&#39;: &#39;huber&#39;, &#39;multioutputregressor__estimator__penalty&#39;: &#39;l2&#39;, &#39;pipeline__simpleimputer__strategy&#39;: &#39;median&#39;} . To see if it&#39;s worth experimenting with a random forest algorithm, let&#39;s try using one and seeing how well it compares to our best linear model. . rf_pipe = make_pipeline( SimpleImputer(), RandomForestRegressor(n_estimators=200, random_state=STATE) ) rf_cv = cross_validate( rf_pipe, X=X_train, y=y_train.values, cv=5, scoring=make_scorer(smape_score, greater_is_better=False), n_jobs=-1, ) . The random forest regressor isn&#39;t producing very good validation scores. Let&#39;s stick with our best linear model. . rf_cv . {&#39;fit_time&#39;: array([532.29898024, 536.56886029, 503.935009 , 519.00876713, 231.90553808]), &#39;score_time&#39;: array([0.36240578, 0.22816491, 0.31431985, 0.59734297, 0.15358281]), &#39;test_score&#39;: array([-8.00994812, -7.41541227, -6.12781725, -8.00751447, -9.59524186])} . We can also determine a baseline to see how much more effective our best predictor is. . #collapse dummy_score = DummyRegressor(strategy=&#39;median&#39;) dummy_score.fit(X=X_train, y=y_train.values) dum_pred = dummy_score.predict(X_test) print(f&quot;&quot;&quot;Our baseline using the median score of our training data yields a SMAPE of: {smape_score(y=y_test.values, y_pred=dum_pred):.2f}% on the test dataset&quot;&quot;&quot;) . . Our baseline using the median score of our training data yields a SMAPE of: 7.28% on the test dataset . Conclusion . #collapse test_score = lin_search.score(X_test, y_test.values) print(f&quot;&quot;&quot;Our best linear model produced a symmetric mean absolute error of: {-test_score:.2f}% on our testing dataset&quot;&quot;&quot;) . . Our best linear model produced a symmetric mean absolute error of: 6.69% on our testing dataset . We&#39;re able to get a slight improvement on recovery using our linear model, but not by much. . If we&#39;re not satisfied with this score, it may be worth experimenting with more advanced imputation techniques, more complex models, and feature engineering. .",
            "url": "https://hamelsmu.github.io/image-test/machine%20learning/python/eda/cleaning/multi-target/regression/2020/07/30/int-project-gold.html",
            "relUrl": "/machine%20learning/python/eda/cleaning/multi-target/regression/2020/07/30/int-project-gold.html",
            "date": " • Jul 30, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://hamelsmu.github.io/image-test/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://hamelsmu.github.io/image-test/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://hamelsmu.github.io/image-test/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://hamelsmu.github.io/image-test/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}